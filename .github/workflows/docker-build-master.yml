name: Build and Push Docker Images on Main

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - 'LICENSE'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no code changes'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Job to check if we should build
  changes:
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            docker:
              - 'Dockerfile'
              - 'docker/**'
              - 'litellm/**'
              - 'requirements.txt'
              - 'pyproject.toml'
              - 'schema.prisma'
              - '.github/workflows/docker-build-master.yml'

  # Main build job
  build-and-push-main:
    needs: changes
    if: needs.changes.outputs.docker == 'true' || github.event.inputs.force_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: github.repository == 'tom130/litellm'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-
            type=raw,value=main
            type=raw,value=main-{{date 'YYYYMMDD'}}
            type=raw,value=main-claude-oauth
          labels: |
            org.opencontainers.image.title=LiteLLM with Claude OAuth
            org.opencontainers.image.description=LiteLLM Proxy with Claude OAuth support
            org.opencontainers.image.vendor=tom130

      - name: Build and push main Docker image
        id: build-main
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            LITELLM_BUILD_IMAGE=cgr.dev/chainguard/python:latest-dev
            LITELLM_RUNTIME_IMAGE=cgr.dev/chainguard/python:latest-dev
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=main-${{ github.sha }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build database image
  build-and-push-database:
    needs: changes
    if: needs.changes.outputs.docker == 'true' || github.event.inputs.force_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: github.repository == 'tom130/litellm'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Extract metadata for database image
        id: meta-database
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-database
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-
            type=raw,value=main
            type=raw,value=main-{{date 'YYYYMMDD'}}

      - name: Build and push database Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.database
          push: true
          tags: ${{ steps.meta-database.outputs.tags }}
          labels: ${{ steps.meta-database.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,scope=database
          cache-to: type=gha,scope=database,mode=max

  # Build non-root image
  build-and-push-non-root:
    needs: changes
    if: needs.changes.outputs.docker == 'true' || github.event.inputs.force_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: github.repository == 'tom130/litellm'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        continue-on-error: true

      - name: Extract metadata for non-root image
        id: meta-non-root
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-non-root
          tags: |
            type=ref,event=branch
            type=sha,prefix=main-
            type=raw,value=main
            type=raw,value=main-{{date 'YYYYMMDD'}}

      - name: Build and push non-root Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.non_root
          push: true
          tags: ${{ steps.meta-non-root.outputs.tags }}
          labels: ${{ steps.meta-non-root.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,scope=non-root
          cache-to: type=gha,scope=non-root,mode=max

  # Notification job
  notify:
    needs: [build-and-push-main, build-and-push-database, build-and-push-non-root]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check build status
        id: status
        run: |
          if [ "${{ needs.build-and-push-main.result }}" == "success" ] && \
             [ "${{ needs.build-and-push-database.result }}" == "success" ] && \
             [ "${{ needs.build-and-push-non-root.result }}" == "success" ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
            echo "message=All Docker images built successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
            echo "message=Some Docker images failed to build" >> $GITHUB_OUTPUT
          fi

      - name: Create build summary
        run: |
          echo "## Docker Build Summary ${{ steps.status.outputs.emoji }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Built" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Image | Status | Registry |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Main | ${{ needs.build-and-push-main.result == 'success' && '✅' || '❌' }} | ghcr.io/${{ github.repository }}:main |" >> $GITHUB_STEP_SUMMARY
          echo "| Database | ${{ needs.build-and-push-database.result == 'success' && '✅' || '❌' }} | ghcr.io/${{ github.repository }}-database:main |" >> $GITHUB_STEP_SUMMARY
          echo "| Non-root | ${{ needs.build-and-push-non-root.result == 'success' && '✅' || '❌' }} | ghcr.io/${{ github.repository }}-non-root:main |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      # Optional: Add Slack or Discord notification here
      # - name: Send Slack notification
      #   if: steps.status.outputs.status == 'failure'
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ steps.status.outputs.status }}
      #     text: 'Docker build failed for main branch'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}